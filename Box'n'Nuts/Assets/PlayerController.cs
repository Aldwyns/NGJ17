using System.Collections; using System.Collections.Generic; using UnityEngine;  public class PlayerController : MonoBehaviour {      public int playerNum; 	public animationController anim; 	public float lowestSpeed = 5f; 	public float maxSpeed = 11f; 	public float minJump = 5f; 	public float maxJump = 10f; 	public float jumpSpeed; 	string HorizontalAxis;     string VerticalAxis;     string JumpButton; 	string phazingButton; 	public float JumpScale = 2f; 	private Material mat; 	public Material phasemat; 	public soundController sounds; 	private bool jumpSound = false;  	private Rigidbody rig; 	public float speed;     float gravity = -2f; 	          bool onGround;     bool jumping;     float startJumpTime;     Vector3 frameDir;     Vector3 moveDir;  	// Use this for initialization 	void Start () { 		sounds = this.GetComponent<soundController>();         HorizontalAxis = "HorizontalPlayer" + playerNum;         VerticalAxis = "VerticalPlayer" + playerNum;         JumpButton = "JumpPlayer" + playerNum; 		phazingButton = "PhasePlayer" + playerNum; 		rig = GetComponent<Rigidbody>(); 		jumpSpeed = minJump; 		speed = lowestSpeed; 		if (anim == null) 		{ 			anim = this.GetComponent<animationController>(); 		}  		mat = GetComponentInChildren<Renderer>().material; 		if (mat != null) 		{ 			Debug.Log("found a material"); 		} 	} 	 	// Update is called once per frame 	void FixedUpdate () {           RaycastHit hit;         if (Physics.Raycast(transform.position+ (Vector3.right * 0.3f) + (Vector3.up * 0.3f), new Vector3(0, -1, 0), out hit, 2f) ||  			Physics.Raycast(transform.position + (Vector3.right * -0.3f)+(Vector3.up * 0.3f), new Vector3(0, -1, 0), out hit, 2f) ||  			Physics.Raycast(transform.position, new Vector3(0, -1, 0) + (Vector3.up * 0.3f), out hit, 2f))         { 			             if (hit.transform != this.transform && !hit.transform.GetComponent<DeathField>() && !hit.transform.GetComponent<Spikes>())             {                 if (Vector3.Distance(hit.point,this.transform.position) <= 0.35f && onGround==false)                 {                     onGround = true;                     jumping = false; 					jumpSound = false;                 }                 //else if ((!jumping && Vector3.Distance(hit.point, this.transform.position) > 0.5f))                 //{                 //    onGround = false;                 //} 				else 				{ 					onGround = false; 				}             }         } 		phazingz(Input.GetAxis(phazingButton)> 0);  		if (Input.GetAxis(JumpButton) > 0 && onGround && !jumping)         { 			if (!jumpSound) 			{ 				sounds.jump(playerNum); 				jumpSound = true; 			} 			             //frameDir.y = (Input.GetAxis("Vertical") * jumpSpeed);             rig.velocity = rig.velocity+(((new Vector3(0,1,0) + hit.normal) / 2) * jumpSpeed);             jumping = true;             startJumpTime = Time.time; 			if (jumpSpeed < maxJump) 			{ 				jumpSpeed += JumpScale; 			} 			anim.jump();         } else if (jumpSpeed > minJump) 		{ 			jumpSpeed -= 0.01f; 		}         /*if (jumping && (Time.time - startJumpTime) < 1f)         {             frameDir.y = ((Input.GetAxis("Vertical") * jumpSpeed) * (Time.time - startJumpTime));         }         else if (jumping && (Time.time - startJumpTime) > 1.2f)         {             jumping = false;         }*/          frameDir.x = (Input.GetAxis(HorizontalAxis));          //moveDir = moveDir + (frameDir * 1.0f) / 2f;         moveDir = moveDir + frameDir; 		if (moveDir != Vector3.zero && speed < maxSpeed) 		{ 			speed += 0.02f; 		} 		else if (speed > lowestSpeed) 		{ 			speed -= 0.05f; 		}  		//this.transform.position = this.transform.position + (moveDir * speed) * Time.deltaTime;   		rig.AddForce(moveDir* speed,ForceMode.Acceleration);          if (this.transform.position.z != 0)         {             this.transform.position = new Vector3(this.transform.position.x, this.transform.position.y,0);         }           moveDir = moveDir * 0.5f;  		  	} 	private void OnCollisionEnter(Collision collision) 	{ 		sounds.impact(playerNum, (int) rig.velocity.magnitude*3); 		if (collision.gameObject.GetComponent<Rigidbody>()) 		{  			if (Vector3.Angle(collision.transform.position - transform.position,rig.velocity) < 90) 			{ 				collision.transform.GetComponent<PlayerController>().addForceInDirection(rig.velocity, collision.contacts); 				addBackLash(rig.velocity, collision); 			}  			/*RaycastHit hit; 			if (Physics.Raycast(transform.position, rig.velocity, out hit, 10f)) 			{ 				if (hit.transform.gameObject == collision.gameObject) 				{ 					Debug.DrawRay(transform.position, rig.velocity, Color.red, 4); 					hit.transform.GetComponent<PlayerController>().addForceInDirection(rig.velocity, collision.contacts); 					 				} 			}*/ 		} 	}  	public void addForceInDirection (Vector3 forz, ContactPoint[] contact) 	{ 		rig.AddForce(forz*1.5f,ForceMode.Impulse); 	}  	public void addBackLash(Vector3 forz, Collision col) 	{ 		rig.AddForce(forz * -1.5f, ForceMode.Impulse); 	}  	public void setZeroVelocity() 	{ 		speed = lowestSpeed; 		jumpSpeed = minJump; 	}  	public void phazingz (bool phazing) 	{ 		if (phazing) 		{ 			rig.detectCollisions = false; 			GetComponentInChildren<Renderer>().material = phasemat; 		} 		else 		{ 			GetComponentInChildren<Renderer>().material = mat; 			rig.detectCollisions = true; 		} 	}  	public void death () 	{ 		sounds.death(playerNum); 	}  } 